plugins {
    id 'java'
}

group 'com.untitledsurvival.lib.plugin'
version '1.0'

archivesBaseName = "${project.name}-plugin"

task buildLib {
    group 'build'

    doLast {
        archivesBaseName = project.name

        // exclude all of the plugin code (from this module)
        sourceSets.main {
            java.srcDirs = resources.srcDirs = []
        }
    }

    finalizedBy build
}

allprojects {
    apply plugin: 'java'

    repositories {
        mavenCentral()
        mavenLocal()
    }

    dependencies {
        // spigot api (use BuildTools --rev 1.18 to get in Maven Local)
        compileOnly 'org.spigotmc:spigot-api:1.18-R0.1-SNAPSHOT'
        compileOnly 'org.spigotmc:spigot:1.18-R0.1-SNAPSHOT'

        // lombok for life
        compileOnly 'org.projectlombok:lombok:1.18.22'
        annotationProcessor 'org.projectlombok:lombok:1.18.22'

        testCompileOnly 'org.projectlombok:lombok:1.18.22'
        testAnnotationProcessor 'org.projectlombok:lombok:1.18.22'

        testImplementation 'junit:junit:4.13.2'
    }

    test {
        useJUnit()
    }

    // place the fat build into its own task
    // so that dependencies aren't built into each jar file
    // causing duplicate classes and overlaps
    task buildFat(type: Jar) {
        group 'build'

        from {
            // compile all implementation in dependencies into jar
            configurations.runtimeClasspath.collect{
                it.isDirectory() ? it : zipTree(it)
            }
        }

        with jar
    }
}

subprojects {
    // setup all the subprojects to be named correctly
    archivesBaseName = "${rootProject.name}-${project.name}"

    // all projects that are not core depend on core
    if (project.name != 'core') {
        dependencies.implementation project(':core')
    }
}

dependencies {
    // implement each subprojects into the root project to ensure it's built
    subprojects.forEach { implementation it }
}

processResources.filesMatching('plugin.yml') {
    expand(name: project.name, version: version, group: project.group)
}
